import os
import socket
import struct
import time

ICMP_ECHO_REQUEST = 8

def calculate_checksum(data):
    """Calculate the checksum for the given data."""
    total_sum = 0

    # Ensure data is an even number of bytes
    if len(data) % 2 == 1:
        data += b'\0'

    # Calculate the sum of 16-bit words
    for i in range(0, len(data), 2):
        chunk = data[i:i + 2]
        total_sum += (chunk[0] << 8) + chunk[1]

    # Fold 32-bit sum to 16 bits and complement
    total_sum = (total_sum >> 16) + (total_sum & 0xFFFF)
    total_sum += total_sum >> 16
    return ~total_sum & 0xFFFF

def create_icmp_packet(sequence):
    """Create an ICMP packet with dummy data and checksum."""
    identifier = os.getpid() & 0xFFFF

    # ICMP packet header (type, code, checksum, id, sequence)
    header = struct.pack("!BBHHH", ICMP_ECHO_REQUEST, 0, 0, identifier, sequence)

    # Dummy data (64 bytes to match typical ping)
    data = b"TEST" * 16

    # Calculate checksum and pack it into the header
    checksum = calculate_checksum(header + data)
    header = struct.pack("!BBHHH", ICMP_ECHO_REQUEST, 0, checksum, identifier, sequence)

    return header + data

def send_ping_request(dest_addr):
    icmp_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)

    sequence = 1
    packet = create_icmp_packet(sequence)
    icmp_socket.sendto(packet, (dest_addr, 0))

    start_time = time.time()
    icmp_socket.settimeout(1.0)

    try:
        while True:
            packet_data, addr = icmp_socket.recvfrom(1024)
            receive_time = time.time()
            icmp_header = packet_data[20:28]
            icmp_type, _, _, _, icmp_seq = struct.unpack("!BBHHH", icmp_header)
            
            if icmp_type == 0 and icmp_seq == sequence:  # ICMP Echo Reply with matching sequence
                ttl = struct.unpack("!B", packet_data[8:9])[0]
                return receive_time - start_time, addr[0], ttl
    except socket.timeout:
        pass
    finally:
        icmp_socket.close()
    
    return None, None, None

def print_ping_statistics(round_trip_time, host, ttl):
    """Print the ping statistics."""
    if round_trip_time is not None:
        print(f"Reply from {host}: time={round_trip_time * 1000:.2f}ms TTL={ttl}")
    else:
        print("Request timed out.")

def my_ping(dest_addr):
    """Ping the specified destination."""
    try:
        while True:
            round_trip_time, host, ttl = send_ping_request(dest_addr)
            print_ping_statistics(round_trip_time, host, ttl)
            time.sleep(1)
    except KeyboardInterrupt:
        print("Ping application terminated.")

if __name__ == "__main__":
    destination = "alibaba.com"  # Domain name
    print(f"Pinging {destination} in Python")
    my_ping(destination)
